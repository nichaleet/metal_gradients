function fitswrite_and_get_ref_header(ref_file,data,filename)
%FITSWRITE saves a Matlab matrix as a FITS image
%
%Usage: fitswrite(data, filename)
%
%Known deficiencies
%
%1. Doesn't support arrays of imaginary numbers.
%2. Only handles simple 2 dimensional arrays of data.
%
%Author: R. G. Abraham, Institute of Astronomy, Cambridge University
%[p]=transform_poisson_ALL_to_fits_direction
%        abraham@ast.cam.ac.uk
 %data=flipud(data);
 %data=fliplr(data);
[nrow,ncol]=size(data);

header_cards = [make_card('SIMPLE','T');       ...
      make_card('BITPIX',-32);       ...
      make_card('NAXIS',2);          ...
      make_card('NAXIS1',nrow);      ...
      make_card('NAXIS2',ncol);      ...
      make_card('BSCALE',1.0);       ...
      make_card('BZERO',0.0);        ...
      make_card('CREATOR','Matlab'); ...
      make_card('DATE',date);        ...
      make_card('EQUINOX' , 2000.); ...                                  
make_card('RADECSYS','FK5'); ...                            
make_card('CTYPE1','RA---TAN'); ...                              
make_card('CRVAL1',fitsheader(ref_file,'CRVAL1')); ...                               
make_card('CRPIX1',fitsheader(ref_file,'CRPIX1')); ...                                 
make_card('CDELT1',fitsheader(ref_file,'CDELT1')); ...%fitsheader(ref_file,'CDELT1')); ...                                  
make_card('CUNIT1','deg'); ...                                    
make_card('CTYPE2','DEC--TAN'); ...                                   
make_card('CRVAL2', fitsheader(ref_file,'CRVAL2')); ...                                  
make_card('CRPIX2', fitsheader(ref_file,'CRPIX2')); ...                                    
make_card('CDELT2',fitsheader(ref_file,'CDELT2')); ...%fitsheader(ref_file,'CDELT2')); ...                                
make_card('CUNIT2','deg'); ...  
%       make_card('WCSAXES',fitsheader(ref_file,'WCSAXES')); ...
%        make_card('CRPIX1',fitsheader(ref_file,'CRPIX1')); ...
%       make_card('CRPIX2',fitsheader(ref_file,'CRPIX2')); ...
%       make_card('CRVAL1',fitsheader(ref_file,'CRVAL1')); ...
%        make_card('CRVAL2',fitsheader(ref_file,'CRVAL2')); ...
%        make_card('CTYPE1',fitsheader(ref_file,'CTYPE1')); ...
%       make_card('CTYPE2',fitsheader(ref_file,'CTYPE2')); ...
%        make_card('CD1_1',fitsheader(ref_file,'CD1_1')); ...
%        make_card('CD2_2',fitsheader(ref_file,'CD2_2')); ...
%        make_card('LTV1',fitsheader(ref_file,'LTV1')); ...
%        make_card('LTV2',fitsheader(ref_file,'LTV2')); ...
%        make_card('LTM1_1',fitsheader(ref_file,'LTM1_1')); ...
%        make_card('LTM2_2',fitsheader(ref_file,'LTM2_2')); ... 
%        make_card('ORIENTAT',fitsheader(ref_file,'ORIENTAT')); ...
%        make_card('RA_APER',fitsheader(ref_file,'RA_APER')); ... 
%        make_card('DEC_APER',fitsheader(ref_file,'DEC_APER')); ... 
%        make_card('PA_APER',fitsheader(ref_file,'PA_APER')); ... 
%        make_card('CENTERA1',fitsheader(ref_file,'CENTERA1')); ... 
%        make_card('CENTERA2',fitsheader(ref_file,'CENTERA2')); ... 
%        make_card('SIZAXIS1',fitsheader(ref_file,'SIZAXIS1')); ... 
%        make_card('SIZAXIS2',fitsheader(ref_file,'SIZAXIS2')); ... 
%        make_card('BINAXIS1',fitsheader(ref_file,'BINAXIS1')); ... 
%        make_card('OCRVAL1',fitsheader(ref_file,'OCRVAL1')); ...         
% make_card('OCRVAL2',fitsheader(ref_file,'OCRVAL2')); ...       
% make_card('OCRPIX2',fitsheader(ref_file,'OCRPIX2')); ...             
% make_card('OCRPIX1',fitsheader(ref_file,'OCRPIX1')); ...            
% make_card('ONAXIS2',fitsheader(ref_file,'ONAXIS2')); ...                                
% make_card('ONAXIS1',fitsheader(ref_file,'ONAXIS1')); ...                                   
% make_card('OCD2_2',fitsheader(ref_file,'OCD2_2')); ...   
% make_card('OCD2_1',fitsheader(ref_file,'OCD2_1')); ...  
% make_card('OORIENTA',fitsheader(ref_file,'OORIENTA')); ...  
% make_card('OCTYPE1',fitsheader(ref_file,'OCTYPE1')); ...       
% make_card('OCD1_1',fitsheader(ref_file,'OCD1_1')); ...    
% make_card('OCD1_2',fitsheader(ref_file,'OCD1_2')); ...   
% make_card('OCTYPE2',fitsheader(ref_file,'OCTYPE2')); ... 
% make_card('O_CRVAL1',fitsheader(ref_file,'O_CRVAL1')); ...                                             
% make_card('O_CRVAL2',fitsheader(ref_file,'O_CRVAL2')); ...                                                
% make_card('G_CRVAL1',fitsheader(ref_file,'G_CRVAL1')); ...                                           
% make_card('G_CRVAL2',fitsheader(ref_file,'G_CRVAL2')); ...                                               
% make_card('G_DRA',fitsheader(ref_file,'G_DRA')); ...                                                  
% make_card('G_DDEC',fitsheader(ref_file,'G_DDEC')); ...                                                  
% make_card('G_RMSRA',fitsheader(ref_file,'G_RMSRA')); ...                                                   
% make_card('G_RMSDEC',fitsheader(ref_file,'G_RMSDEC')); ...                                                
% make_card('G_NMATCH',fitsheader(ref_file,'G_NMATCH')); ...                                                 
% make_card('WCSDIM',fitsheader(ref_file,'WCSDIM')); ...                                                 
% make_card('CDELT1',fitsheader(ref_file,'CDELT1')); ...                                                
% make_card('CDELT2',fitsheader(ref_file,'CDELT2')); ...                                                 
% make_card('WAT0_001',fitsheader(ref_file,'WAT0_001')); ...                                                    
% make_card('WAT1_001',fitsheader(ref_file,'WAT1_001')); ...                                                 
% make_card('WAT2_001',fitsheader(ref_file,'WAT2_001')); ...  
      make_card('END')];

header_record = make_header_record(header_cards);

%[ncards,dummy]=size(header_cards);
%fprintf(header_record(1,:));

fid=fopen(filename,'w');
fwrite(fid,header_record','char');

% try to figure out if we need to swap bytes. This is
% imperfect as I don't know the endian-ness of each
% architecture, so I'm only looking for ones I know for 
% sure are big-endian.
friend = computer;
if strmatch(friend,'PCWIN')
   bswap = 'b';
elseif strmatch(friend,'LNX86')
   bswap = 'b';   
elseif strmatch(friend,'ALPHA')
   bswap = 'b';
else
    %i CHANGED THIS TO UNI COMPUTER 
   %bswap = 'l';
   bswap = 'b';
end

fwrite(fid,data,'float',bswap);
fclose(fid);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function card=make_card(keyword,value)
%MAKE_CARD turns a set of strings into a valid FITS card

%Make keyword field 8 bytes long
lk=length(keyword);
if (lk > 8) & (nargin>1)
	error('Keyword must be less than or equal to 8 characters!')
elseif (lk < 8 )
	keyword=[keyword,setstr(ones(1,8-lk)*32)];
end;

%Deal with both straight keyword and keyword/value pair
if (nargin==1)
	%Keyword without a value
	card=keyword;	
else
	%Key/value pair has an equal sign and space at bytes 9 and 10
	card=[keyword,'= '];

	%Now output the value. The FITS standard wants things to start 
	%in different columns depending on what type of data the
	%value holds, according to the following rules:
	%
	%  Logical: T or F in column 30
	%
	%  Character string: A beginning quote in column 11 and an
	%  ending quote between columns 20 and 80.
	%
	%  Real part of an integer or floating point number: right 
	%  justified, ending in column 30.
	%
	%  Imaginary part: right justified, ending in
	%  column 50, starting after column 30 (NB. I won't bother 
	%  to support an imaginary part in this M-file, and will 
	%  let some radio astronomer who needs it add it if they want).

	if isstr(value)
  	    %Test for logical. If logical it goes in column 30 
		if (length(value)==1) & (strmatch(upper(value),'T') | strmatch(upper(value),'F'))
 			card=[card,setstr(ones(1,19)*32),value];	
		else	
			%Value must be a character string. Pad if less than 8
			%characters long.
			lv=length(value);
		    if (lv > 70)
		   error('Value must be less than 70 characters long!')
		    elseif (lv < 10 )
 	 	   value=[value,setstr(ones(1,8-lv)*32)];
		    end;
			card=[card,'''',value,''''];
		end;	
	else
		%Value must be a number. Convert to a string. Maximum
		%precision is set to 10 digits
		value=num2str(value,10);
		lv=length(value);
	
		%Write this out so it will end on column 30
		card=[card,setstr(ones(1,20-lv)*32),value];	
	end;
end;

%Now pad the output to make it exactly 80 bytes long
card=[card,setstr(ones(1,80-length(card))*32)];



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function hrec=make_header_record(card_matrix)

[nrow,ncol] = size(card_matrix);
n_blanks = 36 - rem(nrow,36);
blank_line = setstr(ones(1,80)*32);
hrec = [card_matrix; repmat(blank_line,n_blanks,1)];
 
 
